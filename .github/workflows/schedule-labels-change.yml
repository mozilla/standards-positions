name: Schedule Label Change Action

on:
  #schedule:
  #  - cron: '*/60 * * * *' # Runs every 60 minutes
  workflow_dispatch: # Allows manual trigger

jobs:
  check_and_run:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up SSH for Git (deploy key)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Get the last few workflow runs
        id: last-runs
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=${{ github.ref_name }} \
            | jq -c '.workflow_runs[] | {name: .name, conclusion: .conclusion}' > last_runs_info.txt

      - name: Print the contents of last_runs_info.txt
        run: |
          echo "Contents of last_runs_info.txt:"
          cat last_runs_info.txt

      - name: Ensure valid JSON output
        run: |
          if [ ! -s last_runs_info.txt ]; then
            echo "No workflow runs found or empty response. Exiting."
            exit 1
          fi

      - name: Iterate over the recent workflows
        id: check-last-run
        run: |
          should_run=false
          while IFS= read -r line; do
            name=$(echo "$line" | jq -r '.name')
            conclusion=$(echo "$line" | jq -r '.conclusion')

            echo "Checking workflow: $name with conclusion: $conclusion"

            if [ "$name" == "Schedule Label Change Action" ] && [ "$conclusion" == "success" ]; then
              should_run=false
              break
            elif [ "$name" == "Label Change Action" ]; then
              should_run=true
              break
            fi
          done < last_runs_info.txt

          if [ "$should_run" == "true" ]; then
            echo "should_run=true" >> $GITHUB_ENV
          else
            echo "should_run=false" >> $GITHUB_ENV
          fi

      - name: Push changes to `trigger-build` branch
        if: env.should_run == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b trigger-build
          git add .
          git commit --allow-empty -m "Trigger build and deploy workflow"
          git remote set-url origin git@github.com:${{ github.repository }}.git
          git push origin trigger-build --force
